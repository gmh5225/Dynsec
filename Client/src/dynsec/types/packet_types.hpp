#pragma once
#include "stdafx.hpp"

namespace Dynsec::PacketTypes {
	struct GameServer {
		uint32_t m_IP;
		uint16_t m_Port;

		GameServer(uint32_t ip, uint16_t port)
			: m_IP(ip), m_Port(port)
		{}
	};

	namespace Request {
		struct EncryptionKeys {
			uint8_t m_FirstXorKey;						// XOR key used after the initial RC4
			uint8_t m_SessionTokenKey[0x8];				// RC4 key for encrypting the session token
			uint8_t m_FinalKey[0x8];							// Final RC4 key ran at the end
		};
		
		struct UserIdentification {
			// ...
		};

		struct GameInformation {
			uint8_t m_GameID;							// ID of the game
			uint16_t m_GameVersion;						// Games version, given to us in InitializeClient
		};

		struct NetworkBaseHeader { // not encrypted
			uint32_t m_Magic;							// Magic for verifying request | 0x44534143 - "DSAC"
			uint32_t m_Size;							// Size of the request after the header (NetworkHeader>)
			uint8_t m_Packet;							// ID of the packet that's being sent. Will most likely be static for init, and dynamic for the rest
			uint8_t m_SessionToken[0x20];				// Session token generated by our server
			uint8_t m_RequestHMAC[0x20];				// HMAC of the request after the header PRE ENCRYPTION to verify it hasn't been tampered
			EncryptionKeys m_Encryption;				// Keys for the encryption used
		};

		struct NetworkHeader : NetworkBaseHeader { // encrypted
			GameInformation m_GameInfo;					// Information on the game, could be modified though so shouldn't be trusted
		};
	}
}